@model IEnumerable<TransactionClass>
@{
    ViewData["Title"] = "Transaction Class";
}

<div class="content-wrapper">
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-3">
                <div class="col-sm">
                    <h1 class="m-0">@Localizer["Transaction Class"]</h1>
                </div>
                <div class="col-sm">
                    <div class="breadcrumb float-sm-right">
                        <a class="btn fa fa-edit" id="createTC">Create New</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <section class="content">
        <div class="container-fluid">
            <div class="input-group input-group-lg d-flex justify-content-center">
                <input type="search" class="form-control form-control-sm mx-auto" id="searchInput" placeholder="Pesquisar">
                <div class="input-group-append">
                    <button type="button" class="btn btn-sm btn-default">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="card cardContent">
                    <!-- /.card-header -->
                    <div class="card-body">
                        <table id="myTable" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>
                                        @Html.DisplayNameFor(model => model.Id)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.Name)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.Description)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.Icon)
                                    </th> 
                                    <th>
                                        @Html.DisplayNameFor(model => model.CreationDate)
                                    </th>
                                    <th class="buttons-column" data-priority="1">@Localizer["Actions"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Id)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Name)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Description)
                                        </td>
                                        <td class="text-center">
                                            <object data="@Url.Content(item.Icon)">
                                                <img src="@Url.Content(item.Icon)" alt="@item.Name" style="padding-bottom: 10px;">
                                            </object>
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.CreationDate)
                                        </td>

                                        <td class="buttons-column buttons-cell" data-priority="1">
                                            <div>
                                                <button class="btn btn-secondary editTC btn-block" data-value="@item.Id">@Localizer["Edit"]</button>
                                                <button class="btn btn-danger deleteTC btn-block" data-value="@item.Id">@Localizer["Delete"]</button>
                                            </div>
                                        </td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<div id="ModalDetail" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["Create"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="DataDetail"></div>
            </div>
            <div class="modal-footer">
                <hr />
            </div>
        </div>
    </div>
</div>


<div id="ModalDetailEdit" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["Edit"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="DataDetailEdit"></div>
            </div>
            <div class="modal-footer">
                <hr />
            </div>
        </div>
    </div>
</div>

<div id="ModalDetailDelete" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["Delete"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="DataDetailDelete"></div>
            </div>
            <div class="modal-footer">
                <hr />
            </div>
        </div>
    </div>
</div>


@section Css {
    <style>
        .buttons-cell .btn {
            height: 12px; /* altura dos botões */
            line-height: 5px; /* espaçamento vertical entre o texto e o botão */
            padding: 12px 8px; /* espaçamento interno do botão */
        }
    </style>
}

@section Scripts {

    <script>

        $(document).ready(function () {

            var icons = document.getElementsByClassName("icon-select");
            for (var i = 0; i < icons.length; i++) {
                var icon = icons[i];
                icon.addEventListener("click", function () {
                    var iconPath = this.getAttribute("data-icon-path");
                    // faça algo com o caminho do ícone selecionado
                });
            }

            // Adiciona evento de clique nas imagens selecionáveis
            $('.selectable-icon').click(function () {
                // Obtém o valor do atributo "src" da imagem clicada
                var selectedIconSrc = $(this).attr('src');

                // Atribui o valor aos campos correspondentes
                $('#Icon').val(selectedIconSrc);
                $('#IconFile').val('');
            });


            $("#createTC").click(function () {
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("Create", "TransactionClass")',
                    data: { id: $(this).data("value") },
                    success: function (data) {
                        $("#DataDetail").html(data);
                        $("#ModalDetail").modal("show");
                    }
                });
            });

            $(".deleteTC").click(function () {
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("Delete", "TransactionClass")',
                    data: { id: $(this).data("value") },
                    success: function (data) {
                        $("#DataDetailDelete").html(data);
                        $("#ModalDetailDelete").modal("show");
                    }
                });
            });

            $(".editTC").click(function () {
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("Edit", "TransactionClass")',
                    data: { id: $(this).data("value") },
                    success: function (data) {
                        $("#DataDetailEdit").html(data);
                        $("#ModalDetailEdit").modal("show");
                    }
                });
            });


            $("#searchInput").on("keyup", function () {
                var value = $(this).val().toLowerCase();
                $("#myTable tr").filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });

            $('#myTable').DataTable({
                "responsive": true,
                "lengthChange": false,
                "autoWidth": false,
                "columnDefs": [
                    { width: '100px', targets: 0 },
                    { width: '100px', targets: 1 },
                    { width: '800px', targets: 2 },
                    { width: '450px', targets: 3 },
                    { width: '100px', targets: 4 }
                ],
                "searching": false,
                "buttons": [
                    {
                        extend: 'csv',
                        exportOptions: {
                            columns: ':not(.buttons-column)'
                        }
                    },
                    {
                        extend: 'excel',
                        exportOptions: {
                            columns: ':not(.buttons-column)'
                        }
                    },
                    {
                        extend: 'pdf',
                        exportOptions: {
                            columns: ':not(.buttons-column)'
                        }
                    },
                    {
                        extend: 'print',
                        exportOptions: {
                            columns: ':not(.buttons-column)'
                        }
                    }
                ]
            }).buttons().container().appendTo('#myTable_wrapper .col-md-6:eq(0)');



            // Recupera as mensagens de erro do TempData
            var errorMessages = @Html.Raw(Json.Serialize(TempData["ErrorMessages"] ?? new string[0]));

            // Exibe os erros em forma de toast
            for (var i = 0; i < errorMessages.length; i++) {
                var parts = errorMessages[i].split(": ");
                var title = "";
                var message = errorMessages[i];
                if (parts.length > 1) {
                    title = parts[0];
                    message = parts[1];
                }

                toastr.error(message, title);
            }

            // Recupera as mensagens de sucesso do TempData
            var successMessages = @Html.Raw(Json.Serialize(TempData["SuccessMessages"] ?? new string[0]));

            // Exibe as mensagens de sucesso em forma de toast
            for (var i = 0; i < successMessages.length; i++) {
                var parts = successMessages[i].split(": ");
                var title = "";
                var message = successMessages[i];
                if (parts.length > 1) {
                    title = parts[0];
                    message = parts[1];
                }

                toastr.success(message, title);
            }

        });
    </script>
}